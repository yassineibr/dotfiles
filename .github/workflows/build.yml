name: "build"

on:
  push:
    branches:
      - 'main'
      - 'feat/ci_cache'
      - 'releases/**'
  pull_request:
    types: [opened, reopened]

jobs:
  nixos-configurations:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      # Here we specify the matrix of our hosts and their target platform architectures
      matrix:
        machine:
          - host: alpha
            platform: x86_64-linux
            large: true
          - host: beta
            platform: x86_64-linux
            large: true
          - host: omega
            platform: x86_64-linux
            large: true
          - host: epsilon
            platform: aarch64-linux
            large: false

    steps:
      - uses: actions/checkout@v4

      - name: Free Disk Space (Ubuntu)
        if: matrix.machine.large == true
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: false
        
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: true
          swap-storage: true

      # We only run this if we are building an aarch64-linux system
      - if: matrix.machine.platform == 'aarch64-linux'
        uses: docker/setup-qemu-action@v3

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v28
        with:
          nix_conf: |
            # access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            keep-outputs = true
            extra-platforms = aarch64-linux i686-linux
            substituters = ${{ secrets.ATTIC_URL }}/system?priority=43 https://nix-community.cachix.org?priority=41 https://numtide.cachix.org?priority=42 https://cache.nixos.org/ https://hyprland.cachix.org
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= system:51hbrsnX2pmCB3z3otgdnt2aq+konejsg/bQ7Qu1W+o= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs= numtide.cachix.org-1:2ps1kLBUWjxIneOy1Ik6cQjb41X0iXVXeHigGmycPPE= hyprland.cachix.org-1:a7pgxzMz7+chwVL3/pzj6jIBMioiJM7ypFP8PwtkuGc=


      - name: Restore and cache Nix store
        uses: nix-community/cache-nix-action@v5
        with:
          # restore and save a cache using this key
          primary-key: nix-${{ runner.os }}-${{ matrix.machine.platform }}-${{ matrix.machine.host }}-${{ hashFiles('**/*.nix', 'flake.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: |
            nix-${{ runner.os }}-${{ matrix.machine.platform }}-${{ matrix.machine.host }}-
            nix-common-${{ runner.os }}-${{ matrix.machine.platform }}-
          # collect garbage until Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          gc-max-store-size-linux: 1073741824
          # do purge caches
          purge: true
          # purge all versions of the cache
          purge-prefixes: nix-${{ runner.os }}-${{ matrix.machine.platform }}-${{ matrix.machine.host }}-
          # created more than this number of seconds ago relative to the start of the `Post Restore` phase
          purge-created: 0
          # except the version with the `primary-key`, if it exists
          purge-primary-key: never

      - name: Remove old cache profiles
        run: rm -rf /nix/var/nix/profiles/cache

      # We build each system in a separate job, targeting the configuration using matrix.machine.host
      - name: Build system
        run: nix build .#nixosConfigurations.${{ matrix.machine.host }}.config.system.build.toplevel

      # Once built, we login to Attic
      - name: Login to attic
        run: nix develop .#ci --command attic login cache ${{ secrets.ATTIC_URL }} ${{ secrets.ATTIC_TOKEN }}

      # push the built system to our `system` cache!
      - name: Push system
        run: nix develop .#ci --command attic push system result -j 2

  merge-similar-caches:
    name: Merge similar caches
    needs: nixos-configurations
    if: success() || failure()
    permissions:
      actions: write
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      # Here we specify the matrix of our hosts and their target platform architectures
      matrix:
        machine:
          - platform: x86_64-linux
          - platform: aarch64-linux

    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: true
        
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: true
          swap-storage: true

      - uses: nixbuild/nix-quick-install-action@v28

      - name: Restore and cache Nix store
        uses: nix-community/cache-nix-action@v5
        with:
          primary-key: nix-common-${{ runner.os }}-${{ matrix.machine.platform }}-${{ hashFiles('**/*.nix', 'flake.lock') }}
          # if no hit, restore current versions of individual caches
          restore-prefixes-all-matches: |
            nix-${{ runner.os }}-${{ matrix.machine.platform }}-
          # do purge caches
          purge: true
          # purge old versions of the `common` cache and any versions of individual caches
          purge-prefixes: |
            nix-common-${{ runner.os }}-${{ matrix.machine.platform }}-
          # created more than 0 seconds ago relative to the start of the `Post Restore` phase
          purge-created: 0
          # except the version with the `primary-key`, if it exists
          purge-primary-key: never

